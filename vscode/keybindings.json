// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+alt+i",
        "command": "editor.action.toggleRenderWhitespace"
    },
    {
        "key": "ctrl+alt+b",
        "command": "workbench.action.toggleActivityBarVisibility"
    },
    {
        "key": "ctrl+alt+n",
        "command": "editor.gotoNextFold"
    },
    {
        "key": "ctrl+alt+p",
        "command": "editor.gotoPreviousFold"
    },
    {
        "key": "ctrl+alt+u",
        "command": "editor.gotoParentFold"
    },
    {
        "key": "ctrl+m",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+meta+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+m",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+alt+meta+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+p",
        "command": "editor.action.showDefinitionPreviewHover"
    },
    {
        "key": "ctrl+up",
        "command": "notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "-notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "-notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+o ctrl+c",
        "command": "notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+a",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k a",
        "command": "notebook.cell.executeCellsAbove"
    },
    {
        "key": "ctrl+alt+left",
        "command": "cursorWordPartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+right",
        "command": "cursorWordPartRight",
        "when": "textInputFocus"
    
        
    },
    {
        "key": "alt+backspace",
        "command": "deleteWordPartLeft",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+delete",
        "command": "deleteWordPartRight",
        "when": "editorTextFocus"
    
    },

    
    { // go to next merge conflict
        "key":"ctrl+k n",
        "command":"merge-conflict.next"
    },

    { // go to previous merge conflict
        "key":"ctrl+k p",
        "command":"merge-conflict.previous"
    },
    {
        "key": "ctrl+o ctrl+e",
        "command": "notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "-notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "alt+0",
        "command": "notebook.clearAllCellsOutputs"
    },
    {
        "key": "ctrl+j",
        "command": "debug.jumpToCursor"
    },
    {
        "key": "alt+t",
        "command": "workbench.debug.panel.action.clearReplAction"
    },
    {
        "key": "numpad6",
        "command": "workbench.files.action.collapseExplorerFolders"
    },
    {
        "key": "alt+f12",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+f10",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "shift+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "f4",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f4",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "alt+j",
        "command": "jupyter.createnewinteractive"
    },
    {
        "key": "alt+u",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+i",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+q",
        "command": "editor.action.toggleColumnSelection"
    },
    {
        "key": "ctrl+f1",
        "command": "workbench.panel.repl.view.focus",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+[",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },

    {
        "key": "ctrl+shift+]",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },

    {
        "key": "ctrl+k alt+s",
        "command": "git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+shift+m",
        "command": "notebook.cell.joinSelected"
    },
    {
        "key": "ctrl+numpad1",
        "command": "github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
    },
    {
        "key": "f7",
        "command": "nbdev.navNotebook",
        "when": "editorTextFocus && editorLangId == 'python'"
    },
    {
        "key": "f2",
        "command": "-nbdev.navNotebook",
        "when": "editorTextFocus && editorLangId == 'python'"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
            "key": "alt+left",
            "command": "workbench.action.navigateBack",
            "when": "canNavigateBack"
        },
        {
            "key": "ctrl+alt+-",
            "command": "-workbench.action.navigateBack",
            "when": "canNavigateBack"
        },
        {
            "key": "ctrl+q s",
            "command": "settings.cycle.copilot",
            "when": "editorFocus"
        },
        {
            "key": "ctrl+i",
            "command": "-editor.action.triggerSuggest",
            "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
        },
        {
            "key": "ctrl+r a",
            "command": "jupyter.runallcellsabove.palette"
        },
        {
            "key": "alt+o",
            "command": "notebook.cell.clearOutputs"
        },
        {
            "key": "alt+delete",
            "command": "-notebook.cell.clearOutputs",
            "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
        },
        {
            "key": "ctrl+shift+g f",
            "command": "gitlens.toggleFileHeatmap"
        },
        {
            "key": "alt+b",
            "command": "-gitlens.toggleFileBlame",
            "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
        },
        {
            "key": "ctrl+r",
            "command": "-workbench.action.reloadWindow",
            "when": "isDevelopment"
        },
        {
            "key": "ctrl+r",
            "command": "workbench.action.reloadWindow"
        },
        {
            "key": "ctrl+m",
            "command": "git.openChange"
        },
        
        {
            "key": "alt+n",
            "command": "workbench.action.compareEditor.nextChange",
            "when": "textCompareEditorVisible"
        },

        {
            "key": "alt+p",
            "command": "workbench.action.compareEditor.previousChange",
            "when": "textCompareEditorVisible"
        },
        {
            "key": "ctrl+k s",
            "command": "-workbench.action.files.saveWithoutFormatting"
        },
        {
            "key": "ctrl+k s",
            "command": "git.stage"
        },
        {
            "key": "ctrl+k shift+s",
            "command": "git.unstage"
        },
        {
            "key": "ctrl+k ctrl+f",
            "command": "editor.foldAll",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+k ctrl+0",
            "command": "-editor.foldAll",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+k ctrl+u",
            "command": "-editor.action.removeCommentLine",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+k shift+u",
            "command": "editor.unfoldAllExcept",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+k ctrl+=",
            "command": "-editor.unfoldAllExcept",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+k shift+f",
            "command": "editor.foldAllExcept",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+k ctrl+-",
            "command": "-editor.foldAllExcept",
            "when": "editorTextFocus && foldingEnabled"
        },
        {
            "key": "ctrl+shift+f12",
            "command": "references-view.findReferences"
        },
        {
            "key": "shift+alt+f12",
            "command": "-references-view.findReferences",
            "when": "editorHasReferenceProvider"
        },
        {
            "key": "ctrl+`",
            "command": "workbench.action.terminal.toggleTerminal",
            "when": "terminal.active"
        },
        {
            "key": "ctrl+`",
            "command": "-workbench.action.terminal.toggleTerminal",
            "when": "terminal.active"
        },
        {
            "key": "ctrl+l l",
            "command": "workbench.action.gotoLine"
        },
        {
            "key": "ctrl+g",
            "command": "-workbench.action.gotoLine"
        },
        {
            "key": "ctrl+g",
            "command": "workbench.view.scm",
            "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
        },
        {
            "key": "ctrl+shift+g g",
            "command": "-workbench.view.scm",
            "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
        },
        {
            "key": "numpad3",
            "command": "editor.debug.action.runToCursor"
        },
        {
            "key": "ctrl+1",
            "command": "workbench.action.focusFirstEditorGroup"
        },
        {
            "key": "ctrl+1",
            "command": "-workbench.action.focusFirstEditorGroup"
        },
        {
            "key": "ctrl+l e",
            "command": "workbench.action.navigateToLastEditLocation"
        },
        {
            "key": "ctrl+k ctrl+q",
            "command": "-workbench.action.navigateToLastEditLocation"
        },
        {
            "key": "ctrl+l n",
            "command": "workbench.action.navigateToLastNavigationLocation"
        },
        {
            "key": "ctrl+f6",
            "command": "python.execInDedicatedTerminal"
        },
        {
            "key": "alt+m",
            "command": "workbench.action.minimizeOtherEditors"
        },
        {
            "key": "ctrl+i",
            "command": "-inlineChat.start",
            "when": "inlineChatHasProvider && !editorReadonly"
        },
        {
            "key": "ctrl+k -",
            "command": "editor.action.fontZoomOut"
        },
        {
            "key": "ctrl+k =",
            "command": "editor.action.fontZoomIn"
        },
        {
            "key": "ctrl+alt+m",
            "command": "workbench.action.toggleMaximizeEditorGroup",
            "when": "maximizedEditorGroup || multipleEditorGroups"
        },
        {
            "key": "ctrl+k ctrl+m",
            "command": "-workbench.action.toggleMaximizeEditorGroup",
            "when": "maximizedEditorGroup || multipleEditorGroups"
        },
        {
            "key": "ctrl+alt+numpad1",
            "command": "workbench.action.quickchat.toggle",
            "when": "hasChatProvider"
        },
        {
            "key": "ctrl+shift+alt+i",
            "command": "-workbench.action.quickchat.toggle",
            "when": "hasChatProvider"
        },
        {
            "key": "ctrl+q e",
            "command": "github.copilot.toggleCopilot"
        },
        {
            "key": "ctrl+alt+i",
            "command": "-emojisense.quickEmojiTerminal",
            "when": "terminalFocus"
        },
        {
            "key": "ctrl+shift+alt+i",
            "command": "-emojisense.quickEmojitextTerminal",
            "when": "terminalFocus"
        },
        {
            "key": "ctrl+i",
            "command": "-emojisense.quickEmoji",
            "when": "editorTextFocus"
        },
        // {
        //     "key": "alt+\\",
        //     "command": "editor.action.inlineSuggest.trigger",
        //     "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
        // },
        // {
        //     "key": "alt+\\",
        //     "command": "-editor.action.inlineSuggest.trigger",
        //     "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
        // },
        {
            "key": "ctrl+shift+i",
            "command": "-emojisense.quickEmojitext",
            "when": "editorTextFocus"
        },
        {
            "key": "ctrl+shift+i",
            "command": "emojisense.quickEmoji"
        },
        {
            "key": "ctrl+shift+k",
            "command": "workbench.action.maximizeEditorHideSidebar"
        },
        {
            "key": "ctrl+alt+d",
            "command": "autoDocstring.generateDocstring",
            "when": "editorTextFocus"
        },
        {
            "key": "ctrl+shift+2",
            "command": "-autoDocstring.generateDocstring",
            "when": "editorTextFocus"
        },
        {
            "key": "ctrl+shift+y",
            "command": "sqltools.executeQuery",
            "when": "editorHasSelection && editorTextFocus && !config.sqltools.disableChordKeybindings"
        },
        {
            "key": "ctrl+e ctrl+e",
            "command": "-sqltools.executeQuery",
            "when": "editorHasSelection && editorTextFocus && !config.sqltools.disableChordKeybindings"
        },
        {
            "key": "ctrl+enter",
            "command": "-github.copilot.generate",
            "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
        },
        {
            "key": "ctrl+k ctrl+m",
            "command": "-workbench.action.toggleMaximizeEditorGroup",
            "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
        },
        {
            "key": "ctrl+k t",
            "command": "workbench.action.toggleEditorWidths"
        },
        {
                "key": "ctrl+shift+r",
                "command": "editor.action.insertSnippet",
                "args": {
                    "snippet": "#region ${1:Region Name}\n\n$0\n\n#endregion"
                },
                "when": "editorTextFocus && editorLangId == 'python'",
                "name": "Insert Python Region"

        },
        {
            "key": "ctrl+k ctrl+m",
            "command": "editor.action.insertSnippet",
            "args": {
                "snippet": "if __name__ == \"__main__\":\n\tpass\n"
            },
            "when": "editorTextFocus && editorLangId == python",
            "name": "Insert if __name__ == '__main__' block"
        },
        {
            "key": "ctrl+k ctrl+e",
            "command": "editor.action.insertSnippet",
            "args": {
                "snippet": "try:\n\t#Code that may raise an exception\n\tpass\nexcept Exception as e:\n\t# Code to handle the raised exception\n\tprint(f'Error: {e}')\nelse:\n\t# Code to execute if no exception occurs\n\tpass\nfinally:\n\t#Code that always executes\n\tpass"
            },
            "when": "editorTextFocus && editorLangId == python",
            "name": "Insert try except else finally block"
        },

        {
            "key": "ctrl+i s",
            "command": "codium.right_click_code_suggestion"
        },
        {
            "key": "ctrl+k f",
            "command": "-workbench.action.closeFolder",
            "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
        },
        {
            "key": "alt+h h",
            "command": "explorer-exclude.exclude",
        },
        {
            "key": "alt+h s",
            "command": "explorer-exclude.remove",
        },
        {
            "key": "alt+]",
            "command": "git.stageSelectedRanges",
            "when": "!operationInProgress"
        },
        {
            "key": "alt+[",
            "command": "git.unstageSelectedRanges",
            "when": "!operationInProgress"
        },
        {
            "key": "ctrl+i",
            "command": "markdown.extension.editing.toggleItalic",
            "when": "editorLangId =~ /^markdown$|^rmd$|^quarto$/"
        },
        {
            "key": "ctrl+alt+pagedown",
            "command": "workbench.action.moveEditorToRightGroup"
        },
        {
            "key": "ctrl+alt+pageup",
            "command": "workbench.action.moveEditorToLeftGroup"
        },
        {
            "key": "ctrl+k a",
            "command": "workbench.action.focusActivityBar"
        },
        {
            "key": "ctrl+alt+e",
            "command": "workbench.action.minimizeOtherEditors",
            "when": "multipleEditorGroups"
        },
        {
            "key": "ctrl+alt+d",
            "command": "jupyter.runAndDebugCell",
            "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'"
        },
        {
            "key": "ctrl+shift+alt+enter",
            "command": "-jupyter.runAndDebugCell",
            "when": "isWorkspaceTrusted && jupyter.ispythonnotebook && !notebookKernel && notebookCellType == 'code' || isWorkspaceTrusted && jupyter.ispythonnotebook && notebookCellType == 'code' && notebookKernel =~ /^ms-toolsai.jupyter\\// && resource not in 'jupyter.notebookeditor.debugDocuments'"
        },
        {
            "key": "alt+numpad_divide",
            "command": "cody.autocomplete.manual-trigger",
            "when": "cody.activated && config.cody.autocomplete.enabled && editorTextFocus && !editorHasSelection && !editorReadonly && !inlineSuggestionsVisible"
        },
        {
            "key": "alt+\\",
            "command": "-cody.autocomplete.manual-trigger",
            "when": "cody.activated && config.cody.autocomplete.enabled && editorTextFocus && !editorHasSelection && !editorReadonly && !inlineSuggestionsVisible"
        },
        {
            "key": "alt+numpad_multiply",
            "command": "cody.command.insertCodeToCursor",
            "when": "cody.activated"
        },
        {
            "key": "ctrl+k f",
            "command": "ruff.executeFormat"
        },
        {
            "key": "ctrl+k 1",
            "command": "extension.csv-to-table.custom"
        },
        {
            "key": "ctrl+alt+u",
            "command": "editor.action.transformToUppercase"
        },
        {
            "key": "ctrl+alt+l",
            "command": "editor.action.transformToLowercase"
        },
        {
            "key": "ctrl+shift+y",
            "command": "workbench.debug.action.toggleRepl",
            "when": "workbench.panel.repl.view.active"
        },
        {
            "key": "ctrl+shift+y",
            "command": "-workbench.debug.action.toggleRepl",
            "when": "workbench.panel.repl.view.active"
        },
        {
            "key": "shift+enter",
            "command": "-jupyter.execSelectionInteractive",
            "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !isCompositeNotebook && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
        },
        {
            "key": "shift+enter",
            "command": "-python.execInREPL",
            "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !accessibilityModeEnabled && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python'"
        },
        {
            "key": "shift+enter",
            "command": "-python.execSelectionInTerminal",
            "when": "editorTextFocus && !findInputFocussed && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
        },
        {
            "key": "shift+enter",
            "command": "-repl.execute",
            "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
        },
        {
            "key": "alt+/",
            "command": "-cody.chat.toggle",
            "when": "cody.activated && editorTextFocus"
        },
        {
            "key": "alt+/",
            "command": "-cody.chat.toggle",
            "when": "cody.activated && !editorTextFocus"
        },
        {
            "key": "ctrl+k b",
            "command": "workbench.action.toggleAuxiliaryBar"
        },
        {
            "key": "ctrl+alt+b",
            "command": "-workbench.action.toggleAuxiliaryBar"
        },
        {
            "key": "shift+alt+/",
            "command": "-cody.chat.new",
            "when": "cody.activated"
        },
        {
            "key": "shift+alt+l",
            "command": "-cody.chat.new",
            "when": "cody.activated"
        }
]
